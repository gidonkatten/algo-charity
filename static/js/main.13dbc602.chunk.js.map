{"version":3,"sources":["components/BackButton.tsx","components/NumberInput.tsx","utils/Requests.tsx","utils/Utils.tsx","algorand/Utils.tsx","algorand/MyAlgoWallet.tsx","algorand/Transactions.tsx","views/CreateFundCampaign.tsx","views/FundCampaign.tsx","App.tsx","algorand/MyAlgoGetAccounts.tsx","views/HowItWorks.tsx","components/SearchFundCampaign.tsx","views/Landing.tsx","index.js"],"names":["BackButton","props","onClick","className","IconButton","Prefix","AlgoNumberInput","hasDecimal","prefix","inputRef","onChange","other","getInputRef","onValueChange","values","target","name","value","decimalScale","undefined","fixedDecimalScale","thousandSeparator","allowNegative","NumberInput","SERVER_URL","getApplication","a","fetch","res","json","getEscrowAddress","appId","convertDateToUnixTime","dateTime","parseInt","getTime","toFixed","algosdk","require","algodClient","Algodv2","waitForConfirmation","Indexer","txId","timeout","Error","status","do","startround","currentround","pendingTransactionInformation","pendingInfo","length","statusAfterBlock","myAlgoWallet","MyAlgo","connectToMyAlgo","connect","accounts","map","account","address","console","error","getParams","getTransactionParams","params","flatFee","fee","createApplication","selectedAddr","start","expiry","goal","statefulBytes","clearBytes","enc","TextEncoder","appArgs","encode","encodeUint64","createApp","type","from","appApprovalProgram","appClearProgram","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","signTransaction","signedCreateApp","sendRawTransaction","blob","tx","log","pendingTx","setEscrow","escrowAddr","callAppTxn","appIndex","appOnComplete","OnApplicationComplete","NoOpOC","signedCallApp","CreateFundCampaign","useState","setName","setStart","setExpiry","setGoal","selectedAddress","exit","handleSubmit","e","preventDefault","startUnix","expiryUnix","Uint8Array","Object","then","onSubmit","Grid","container","spacing","item","xs","TextField","label","required","fullWidth","inputProps","maxLength","InputLabelProps","Number","InputProps","inputComponent","helperText","readOnly","clearable","date","disablePast","format","Button","variant","color","style","margin","FundCampaign","PageNav","MyAlgoGetAccounts","addresses","setAddresses","setSelectedAddress","addrs","handleSelectAddress","addr","FormControl","component","RadioGroup","FormControlLabel","control","Radio","HowItWorks","Divider","orientation","width","SearchFundCampaign","Landing","enterCreate","enterCampaign","App","LANDING","nav","setNav","CREATE","CAMPAIGN","ReactDOM","render","StrictMode","utils","DateFnsUtils","document","getElementById"],"mappings":"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","file":"static/js/main.13dbc602.chunk.js","sourcesContent":["import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\ninterface BackButtonProps {\n  onClick: () => void,\n}\n\nexport function BackButton(props: BackButtonProps) {\n  const { onClick } = props;\n\n  return (\n    <div className={\"back-button\"}>\n      <IconButton onClick={onClick}><ArrowBackIcon/></IconButton>\n    </div>\n  )\n}","import NumberFormat from \"react-number-format\";\n\nexport function AlgoNumberInput(props) {\n  return NumberInput({ ...props, hasDecimal: true });\n}\n\nexport enum Prefix {\n  DOLLAR = \"$\",\n  ALGO = \"Algo \",\n}\n\nfunction NumberInput(props) {\n  const { hasDecimal, prefix, inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      decimalScale={hasDecimal ? 6 : undefined}\n      fixedDecimalScale={hasDecimal}\n      thousandSeparator\n      allowNegative={false}\n      prefix={prefix}\n    />\n  );\n}","const SERVER_URL = 'https://algo-charity.herokuapp.com';\n\nexport async function getApplication(): Promise<{\n  statefulBytes: Uint8Array,\n  clearBytes: Uint8Array,\n}> {\n  const res = await fetch(`${SERVER_URL}/application`);\n  return await res.json();\n}\n\nexport async function getEscrowAddress(appId: number): Promise<string> {\n  const res = await fetch(`${SERVER_URL}/escrow/${appId}`);\n  return await res.json();\n}\n","/**\n * Convert from DateTime to Unix time\n */\nexport function convertDateToUnixTime(dateTime: Date): number {\n  return parseInt((dateTime.getTime() / 1000).toFixed(0));\n}\n\n/**\n * Convert from Unix time to Date String\n */\nexport function convertUnixTimeToDate(unixTime: number): string {\n  return new Date(unixTime * 1000).toDateString();\n}\n\n/**\n * Convert from Unix time to Time String\n */\nexport function convertUnixTimeToTime(unixTime: number): string {\n  return new Date(unixTime * 1000).toTimeString();\n}\n\n/**\n * Format stablecoin\n */\nexport function formatAlgoDecimalNumber(amount: number): string {\n  return (amount / 1e6).toFixed(6);\n}\n","const algosdk = require('algosdk');\n\nconst algodServer = 'https://testnet.algoexplorerapi.io/'\nconst indexerServer = 'https://testnet.algoexplorerapi.io/idx2'\nconst port = 443;\nexport const algodClient = new algosdk.Algodv2('', algodServer, port);\nexport const indexerClient = new algosdk.Indexer('', indexerServer, port);\n\n/**\n * Utility function to wait on a transaction to be confirmed\n * the timeout parameter indicates how many rounds do you wish to check pending transactions for\n */\nexport const waitForConfirmation = async function (txId: string, timeout: number = 1000) {\n  if (algodClient == null || txId == null || timeout < 0) {\n    throw new Error(\"Bad arguments.\");\n  }\n\n  const status = (await algodClient.status().do());\n  if (status === undefined) throw new Error(\"Unable to get node status\");\n\n  const startround = status[\"last-round\"] + 1;\n  let currentround = startround;\n\n  while (currentround < (startround + timeout)) {\n    let pendingInfo = await algodClient.pendingTransactionInformation(txId).do();\n    if (pendingInfo !== undefined) {\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n        //Got the completed Transaction\n        return pendingInfo;\n      }\n      else {\n        if (pendingInfo[\"pool-error\"] != null && pendingInfo[\"pool-error\"].length > 0) {\n          // If there was a pool error, then the transaction has been rejected!\n          throw new Error(\"Transaction Rejected pool error\" + pendingInfo[\"pool-error\"]);\n        }\n      }\n    }\n    await algodClient.statusAfterBlock(currentround).do();\n    currentround++;\n  }\n\n  throw new Error(\"Transaction not confirmed after \" + timeout + \" rounds!\");\n};\n","import MyAlgo, { Accounts } from '@randlabs/myalgo-connect';\n\nexport const myAlgoWallet = new MyAlgo();\n\n/*Warning: Browser will block pop-up if user doesn't trigger myAlgoWallet.connect() with a button interation */\nexport const connectToMyAlgo = async () => {\n  try {\n    const accounts: Accounts[] = await myAlgoWallet.connect();\n    return accounts.map(account => account.address);\n  } catch (err) {\n    console.error(err);\n    return [];\n  }\n}","import { encodeUint64, OnApplicationComplete, SuggestedParams } from 'algosdk';\nimport { algodClient, waitForConfirmation } from './Utils';\nimport { CallApplTxn, CreateApplTxn, SignedTx } from '@randlabs/myalgo-connect';\nimport { myAlgoWallet } from './MyAlgoWallet';\n\nasync function getParams(): Promise<SuggestedParams> {\n  let params: SuggestedParams = await algodClient.getTransactionParams().do();\n  params.flatFee = true;\n  params.fee = 1000;\n  return params;\n}\n\nexport async function createApplication(\n  selectedAddr: string,\n  name: string,\n  start: number,\n  expiry: number,\n  goal: number,\n  statefulBytes: Uint8Array,\n  clearBytes: Uint8Array,\n) {\n  const params: SuggestedParams = await getParams();\n\n  const enc = new TextEncoder();\n  const appArgs: Uint8Array[] = [\n    enc.encode(name),\n    encodeUint64(start),\n    encodeUint64(expiry),\n    encodeUint64(goal),\n  ];\n\n  // Create and sign txn\n  const createApp: CreateApplTxn = {\n    ...params,\n    flatFee: true,\n    type: 'appl',\n    from: selectedAddr,\n    appApprovalProgram: statefulBytes,\n    appClearProgram: clearBytes,\n    appLocalInts: 2,\n    appLocalByteSlices: 0,\n    appGlobalInts: 4,\n    appGlobalByteSlices: 2,\n    appArgs: appArgs,\n  }\n  const signedCreateApp: SignedTx = await myAlgoWallet.signTransaction(createApp);\n\n  // Send and wait for confirmation\n  const tx = await algodClient.sendRawTransaction(signedCreateApp.blob).do();\n  console.log(\"Transaction: \" + tx.txId);\n  await waitForConfirmation(tx.txId);\n\n  // Get the new app's id\n  const pendingTx = await algodClient.pendingTransactionInformation(tx.txId).do();\n  const appId = pendingTx[\"application-index\"];\n  console.log(\"AppId: \" + appId);\n\n  return appId;\n}\n\nexport async function setEscrow(\n  selectedAddr: string,\n  appId: number,\n  escrowAddr: string,\n) {\n  const params: SuggestedParams = await getParams();\n\n  const enc = new TextEncoder();\n  const appArgs: Uint8Array[] = [\n    enc.encode('set_escrow'),\n    enc.encode(escrowAddr),\n  ];\n\n  // Create and sign txn\n  const callAppTxn: CallApplTxn = {\n    ...params,\n    flatFee: true,\n    type: \"appl\",\n    from: selectedAddr,\n    appIndex: appId,\n    appOnComplete: OnApplicationComplete.NoOpOC,\n    appArgs: appArgs,\n  }\n  const signedCallApp: SignedTx = await myAlgoWallet.signTransaction(callAppTxn);\n\n  // Send and wait for confirmation\n  const tx = await algodClient.sendRawTransaction(signedCallApp.blob).do();\n  console.log(\"Transaction: \" + tx.txId);\n  await waitForConfirmation(tx.txId);\n}\n\nexport async function match() {\n\n}\n\nexport async function donate() {\n\n}\n\nexport async function recover() {\n\n}\n\nexport async function claim() {\n\n}","import React, { useState } from \"react\";\nimport { BackButton } from '../components/BackButton';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport { AlgoNumberInput } from '../components/NumberInput';\nimport { getApplication, getEscrowAddress } from '../utils/Requests';\nimport { convertDateToUnixTime } from '../utils/Utils';\nimport { createApplication, setEscrow } from '../algorand/Transactions';\n\ninterface CreateFundCampaignProps {\n  selectedAddress?: string;\n  exit: () => void;\n}\n\nexport function CreateFundCampaign(props: CreateFundCampaignProps) {\n\n  const [name, setName] = useState<string>('');\n  const [start, setStart] = useState(null);\n  const [expiry, setExpiry] = useState(null);\n  const [goal, setGoal] = useState(0);\n  const [appId, setAppId] = useState(0);\n\n  const { selectedAddress, exit } = props;\n\n  const clearForm = () => {\n    setName('');\n    setStart(null);\n    setExpiry(null);\n    setGoal(0);\n  }\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n\n    // check values\n    if(name.length === 0 || !start || !expiry || goal === 0 || !selectedAddress) return;\n    const startUnix = convertDateToUnixTime(start!);\n    const expiryUnix = convertDateToUnixTime(expiry!);\n    if (startUnix >= expiryUnix) return;\n\n    // create application\n    const { statefulBytes, clearBytes } = await getApplication();\n    const appId = await createApplication(\n      selectedAddress,\n      name,\n      startUnix,\n      expiryUnix,\n      goal * 1e6,\n      Uint8Array.from(Object.values(statefulBytes)),\n      Uint8Array.from(Object.values(clearBytes)),\n    );\n\n    // set escrow address\n    getEscrowAddress(appId).then(escrowAddr => {\n      setEscrow(selectedAddress, appId, escrowAddr);\n      clearForm();\n    })\n  }\n\n  const handleStartChange = (date) => setStart(date);\n  const handleExpiryChange = (date) => setExpiry(date)\n\n  return (\n    <div>\n      <BackButton onClick={exit}/>\n\n      {appId ?\n        <p className={\"content\"}>\n          Created application with ID {appId}. You can found your campaign by\n          searching for this number.\n        </p> : null\n      }\n\n      <form onSubmit={handleSubmit}>\n\n        <Grid container spacing={3}>\n\n          <Grid item xs={7}>\n            <TextField\n                label=\"Name:\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n                required\n                fullWidth\n                inputProps={{ maxLength: 63 }}\n                InputLabelProps={{ required: false }}\n            />\n          </Grid>\n\n          <Grid item xs={5}>\n            <TextField\n                label=\"Fund Goal (Algo):\"\n                value={goal}\n                onChange={e => setGoal(Number(e.target.value))}\n                required\n                fullWidth\n                InputProps={{ inputComponent: AlgoNumberInput }}\n                InputLabelProps={{ required: false }}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextField\n              label=\"Selected Address:\"\n              value={selectedAddress ? selectedAddress : ''}\n              helperText=\"This can be changed in the landing page\"\n              required\n              InputProps={{ readOnly: true }}\n              InputLabelProps={{ required: false }}\n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <KeyboardDateTimePicker\n              clearable\n              label=\"Start date:\"\n              value={start}\n              onChange={handleStartChange}\n              disablePast\n              format=\"yyyy/MM/dd HH:mm\"\n              required\n              InputLabelProps={{ required: false }}\n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <KeyboardDateTimePicker\n              clearable\n              label=\"Expiry Date:\"\n              value={expiry}\n              onChange={handleExpiryChange}\n              disablePast\n              format=\"yyyy/MM/dd HH:mm\"\n              required\n              InputLabelProps={{ required: false }}\n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              style={{ margin: '8px 0px' }}\n              fullWidth\n            >\n              Create\n            </Button>\n          </Grid>\n\n        </Grid>\n\n      </form>\n\n    </div>\n  )\n}\n","import React from \"react\";\nimport { BackButton } from '../components/BackButton';\n\ninterface FundCampaignProps {\n  selectedAddress?: string;\n  exit: () => void;\n}\n\nexport function FundCampaign(props: FundCampaignProps) {\n\n  const { selectedAddress, exit } = props;\n\n  return (\n    <div>\n      <BackButton onClick={exit}/>\n      Fund Campaign\n    </div>\n  )\n}\n","import React, { useState } from \"react\";\nimport { CreateFundCampaign } from './views/CreateFundCampaign';\nimport { FundCampaign } from './views/FundCampaign';\nimport { Landing } from './views/Landing';\n\nexport enum PageNav {\n    LANDING,\n    CREATE,\n    CAMPAIGN,\n}\n\nfunction App() {\n\n  const [nav, setNav] = useState(PageNav.LANDING);\n  const [addresses, setAddresses] = useState([]);\n  const [selectedAddress, setSelectedAddress] = useState(undefined);\n\n  const enterCreate = () => setNav(PageNav.CREATE);\n  const enterCampaign = () => setNav(PageNav.CAMPAIGN);\n  const exit = () => setNav(PageNav.LANDING);\n\n  return (\n    <div className={\"page-content\"}>\n\n      <h1>Algo Charity</h1>\n\n      {nav === PageNav.LANDING ?\n        <Landing\n          addresses={addresses}\n          setAddresses={setAddresses}\n          selectedAddress={selectedAddress}\n          setSelectedAddress={setSelectedAddress}\n          enterCreate={enterCreate}\n          enterCampaign={enterCampaign}\n        /> : null\n      }\n\n      {nav === PageNav.CREATE ?\n        <CreateFundCampaign\n          selectedAddress={selectedAddress}\n          exit={exit}\n        /> : null\n      }\n\n      {nav === PageNav.CAMPAIGN ?\n        <FundCampaign\n          selectedAddress={selectedAddress}\n          exit={exit}\n        /> : null\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { connectToMyAlgo } from './MyAlgoWallet';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\ninterface MyAlgoGetAccountsProps {\n  addresses: string[];\n  setAddresses: any;\n  selectedAddress?: string;\n  setSelectedAddress: any;\n}\n\nexport const MyAlgoGetAccounts = (props: MyAlgoGetAccountsProps) => {\n\n  const {\n    addresses,\n    setAddresses,\n    selectedAddress,\n    setSelectedAddress,\n  } = props;\n\n  const connect = async () => {\n    connectToMyAlgo().then(addrs => {\n      setAddresses(addrs);\n      if (addrs.length > 0) setSelectedAddress(addrs[0]);\n    });\n  }\n\n  const handleSelectAddress = async (e) => {\n    const addr = e.target.value;\n    if (addr) setSelectedAddress(addr);\n  }\n\n  return (\n    <div>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={connect}\n        fullWidth\n      >\n        Connect To MyAlgo Wallet\n      </Button>\n\n      <FormControl component=\"fieldset\">\n        <RadioGroup value={selectedAddress ? selectedAddress : ''} onChange={handleSelectAddress}>\n          {addresses.map((addr) => {\n            return (\n              <FormControlLabel\n                key={addr}\n                value={addr}\n                control={<Radio/>}\n                label={addr}\n              />\n            )\n          })}\n        </RadioGroup>\n      </FormControl>\n\n    </div>\n  )\n};","import Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport React from 'react';\n\nexport function HowItWorks() {\n  return (\n    <>\n      <h2>How It Works</h2>\n\n      <p className={\"content\"}>\n        Algo Charity is a platform specifically for match funding campaigns.\n        Match funding is a great way to encourage more people to give and for\n        people to give more as all donations received are multiplied! One has\n        the ability to make an even bigger difference!\n      </p>\n\n      <p className={\"content\"}>\n        Blockchain technology guarantees that your contributions are matched to\n        give you the peace of mind that your money matters.\n      </p>\n\n      <Grid container>\n\n        <Grid item xs={5}>\n          <h3>Matcher</h3>\n          <p className={\"content\"}>\n            Become a matcher and commit to matching donations up to a certain\n            amount with a chosen ratio.\n          </p>\n        </Grid>\n\n        <Grid item xs={2}>\n          <Divider orientation=\"vertical\" style={{ margin: 'auto', width: 3 }} />\n        </Grid>\n\n        <Grid item xs={5}>\n          <h3>Donor</h3>\n          <p className={\"content\"}>\n            Become a donor and have your donation automatically matched.\n          </p>\n        </Grid>\n\n      </Grid>\n    </>\n  )\n}\n","export function SearchFundCampaign() {\n  return (\n    <div>\n      Search\n    </div>\n  )\n}\n","import React from \"react\";\nimport { MyAlgoGetAccounts } from '../algorand/MyAlgoGetAccounts';\nimport { HowItWorks } from './HowItWorks';\nimport { SearchFundCampaign } from '../components/SearchFundCampaign';\nimport Button from '@material-ui/core/Button';\n\ninterface LandingProps {\n  addresses: string[];\n  setAddresses: any;\n  selectedAddress?: string;\n  setSelectedAddress: any;\n  enterCreate: () => void;\n  enterCampaign: () => void;\n}\n\nexport function Landing(props: LandingProps) {\n\n  const {\n    addresses,\n    setAddresses,\n    selectedAddress,\n    setSelectedAddress,\n    enterCreate,\n    enterCampaign,\n  } = props;\n\n  return (\n    <div>\n      <MyAlgoGetAccounts\n        addresses={addresses}\n        setAddresses={setAddresses}\n        selectedAddress={selectedAddress}\n        setSelectedAddress={setSelectedAddress}\n      />\n\n      <HowItWorks/>\n\n      <SearchFundCampaign/>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={enterCreate}\n        fullWidth\n      >\n        Create Fund Campaign\n      </Button>\n\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport '@fontsource/roboto';\nimport './styles/page.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <App />\n    </MuiPickersUtilsProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}