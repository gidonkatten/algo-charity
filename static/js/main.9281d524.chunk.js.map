{"version":3,"sources":["components/SearchFundCampaign.tsx","index.js","algorand/Utils.tsx","components/BackButton.tsx","utils/Utils.tsx","algorand/MyAlgoWallet.tsx","algorand/Transactions.tsx","views/CreateFundCampaign.tsx","views/FundCampaign.tsx","algorand/MyAlgoGetAccounts.tsx","views/HowItWorks.tsx","App.tsx","views/Landing.tsx","utils/Requests.tsx","components/NumberInput.tsx"],"names":["SearchFundCampaign","props","useState","NaN","appId","setAppId","enterCampaign","setSearch","setAppState","search","a","Search","SEARCHING","getApplication","statefulBytes","clearBytes","approval","Buffer","from","Uint8Array","Object","values","toString","clear","algodClient","getApplicationByID","do","params","NOT_VERIFIED","console","log","appState","extractAppState","getEscrowAddress","escrowAddr","get","VERIFIED","label","variant","value","onChange","e","parseInt","target","InputProps","inputComponent","IntegerInput","endAdornment","position","onClick","edge","aria-label","required","fullWidth","InputLabelProps","ReactDOM","render","utils","DateFnsUtils","document","getElementById","algosdk","require","Algodv2","waitForConfirmation","Indexer","txId","timeout","Error","status","undefined","startround","currentround","pendingTransactionInformation","pendingInfo","length","statusAfterBlock","state","map","Map","forEach","pair","key","atob","type","bytes","uint","set","BackButton","className","IconButton","convertDateToUnixTime","dateTime","getTime","toFixed","myAlgoWallet","MyAlgo","connectToMyAlgo","connect","accounts","account","address","error","getParams","getTransactionParams","flatFee","fee","createApplication","selectedAddr","name","start","expiry","goal","enc","TextEncoder","appArgs","encode","encodeUint64","createApp","appApprovalProgram","appClearProgram","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","signTransaction","signedCreateApp","sendRawTransaction","blob","tx","pendingTx","setEscrow","callAppTxn","appIndex","appOnComplete","OnApplicationComplete","NoOpOC","signedCallApp","CreateFundCampaign","setName","setStart","setExpiry","setGoal","selectedAddress","exit","handleSubmit","preventDefault","startUnix","expiryUnix","then","onSubmit","Grid","container","spacing","item","xs","TextField","inputProps","maxLength","Number","AlgoNumberInput","helperText","clearable","date","disablePast","format","Button","color","style","margin","FundCampaign","searching","notVerified","verified","MyAlgoGetAccounts","addresses","setAddresses","setSelectedAddress","addrs","handleSelectAddress","addr","FormControl","component","RadioGroup","FormControlLabel","control","Radio","HowItWorks","Divider","orientation","width","PageNav","Landing","enterCreate","App","LANDING","nav","setNav","CREATE","CAMPAIGN","SERVER_URL","fetch","res","json","Prefix","hasDecimal","prefix","inputRef","other","getInputRef","onValueChange","decimalScale","fixedDecimalScale","thousandSeparator","allowNegative","NumberInput"],"mappings":"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","file":"static/js/main.9281d524.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport { IntegerInput } from \"./NumberInput\";\nimport { algodClient, extractAppState } from '../algorand/Utils';\nimport { getApplication, getEscrowAddress } from '../utils/Requests';\nimport { Search } from '../App';\n\ninterface SearchFundCampaignProps {\n  enterCampaign: () => void;\n  setSearch: any;\n  setAppState: any;\n}\n\nexport function SearchFundCampaign(props: SearchFundCampaignProps) {\n\n  const [appId, setAppId] = useState<number>(NaN);\n\n  const { enterCampaign, setSearch, setAppState } = props;\n\n  const search = async () => {\n    setSearch(Search.SEARCHING);\n    enterCampaign();\n\n    // verify app\n    const { statefulBytes, clearBytes } = await getApplication();\n    const approval =  Buffer.from(Uint8Array.from(Object.values(statefulBytes))).toString('base64');\n    const clear =  Buffer.from(Uint8Array.from(Object.values(clearBytes))).toString('base64');\n    let params;\n    try {\n      params = (await algodClient.getApplicationByID(appId).do())[\"params\"];\n      if (approval !== params[\"approval-program\"] || clear !== params[\"clear-state-program\"]) {\n        setSearch(Search.NOT_VERIFIED);\n        return\n      }\n    } catch (err) {\n      console.log(err);\n      setSearch(Search.NOT_VERIFIED);\n      return;\n    }\n\n    // verify escrow\n    const appState = extractAppState(params[\"global-state\"]);\n    const escrowAddr = await getEscrowAddress(appId);\n    if (appState.get(\"escrow\") !== escrowAddr) {\n      setSearch(Search.NOT_VERIFIED);\n      return\n    }\n\n    setSearch(Search.VERIFIED);\n    setAppState(appState);\n  }\n\n  return (\n      <TextField\n        label=\"Search...\"\n        variant=\"outlined\"\n        value={appId || ''}\n        onChange={e => setAppId(parseInt(e.target.value))}\n        InputProps={{\n          inputComponent: IntegerInput,\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton\n                onClick={search}\n                edge=\"end\"\n                aria-label=\"search\"\n              >\n                <SearchIcon/>\n              </IconButton>\n            </InputAdornment>\n          )\n        }}\n        required\n        fullWidth\n        InputLabelProps={{ required: false }}\n      />\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport '@fontsource/roboto';\nimport './styles/page.css'\n\nReactDOM.render(\n  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    <App />\n  </MuiPickersUtilsProvider>,\n  document.getElementById('root')\n);\n","import { TealKeyValue } from 'algosdk/dist/types/src/client/v2/algod/models/types';\n\nconst algosdk = require('algosdk');\n\nconst algodServer = 'https://testnet.algoexplorerapi.io/'\nconst indexerServer = 'https://testnet.algoexplorerapi.io/idx2'\nconst port = 443;\nexport const algodClient = new algosdk.Algodv2('', algodServer, port);\nexport const indexerClient = new algosdk.Indexer('', indexerServer, port);\n\n/**\n * Utility function to wait on a transaction to be confirmed\n * the timeout parameter indicates how many rounds do you wish to check pending transactions for\n */\nexport const waitForConfirmation = async function (txId: string, timeout: number = 1000) {\n  if (algodClient == null || txId == null || timeout < 0) {\n    throw new Error(\"Bad arguments.\");\n  }\n\n  const status = (await algodClient.status().do());\n  if (status === undefined) throw new Error(\"Unable to get node status\");\n\n  const startround = status[\"last-round\"] + 1;\n  let currentround = startround;\n\n  while (currentround < (startround + timeout)) {\n    let pendingInfo = await algodClient.pendingTransactionInformation(txId).do();\n    if (pendingInfo !== undefined) {\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n        //Got the completed Transaction\n        return pendingInfo;\n      }\n      else {\n        if (pendingInfo[\"pool-error\"] != null && pendingInfo[\"pool-error\"].length > 0) {\n          // If there was a pool error, then the transaction has been rejected!\n          throw new Error(\"Transaction Rejected pool error\" + pendingInfo[\"pool-error\"]);\n        }\n      }\n    }\n    await algodClient.statusAfterBlock(currentround).do();\n    currentround++;\n  }\n\n  throw new Error(\"Transaction not confirmed after \" + timeout + \" rounds!\");\n};\n\n/**\n * Extract app state given TealKeyValue[]\n */\nexport function extractAppState(state?: TealKeyValue[] | undefined): Map<string, any> {\n  const map: Map<string, any> = new Map();\n\n  if (state) {\n    // Check if has a state\n    if (state) {\n      state.forEach(pair => {\n        const key: string = atob(pair.key);\n        let value: number | bigint | string;\n        if (pair.value.type === 1) value = atob(pair.value.bytes);\n        else value = pair.value.uint;\n        map.set(key, value);\n      })\n    }\n  }\n\n  return map;\n}\n","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\ninterface BackButtonProps {\n  onClick: () => void,\n}\n\nexport function BackButton(props: BackButtonProps) {\n  const { onClick } = props;\n\n  return (\n    <div className={\"back-button\"}>\n      <IconButton onClick={onClick}><ArrowBackIcon/></IconButton>\n    </div>\n  )\n}","/**\n * Convert from DateTime to Unix time\n */\nexport function convertDateToUnixTime(dateTime: Date): number {\n  return parseInt((dateTime.getTime() / 1000).toFixed(0));\n}\n\n/**\n * Convert from Unix time to Date String\n */\nexport function convertUnixTimeToDate(unixTime: number): string {\n  return new Date(unixTime * 1000).toDateString();\n}\n\n/**\n * Convert from Unix time to Time String\n */\nexport function convertUnixTimeToTime(unixTime: number): string {\n  return new Date(unixTime * 1000).toTimeString();\n}\n\n/**\n * Format stablecoin\n */\nexport function formatAlgoDecimalNumber(amount: number): string {\n  return (amount / 1e6).toFixed(6);\n}\n","import MyAlgo, { Accounts } from '@randlabs/myalgo-connect';\n\nexport const myAlgoWallet = new MyAlgo();\n\n/*Warning: Browser will block pop-up if user doesn't trigger myAlgoWallet.connect() with a button interation */\nexport const connectToMyAlgo = async () => {\n  try {\n    const accounts: Accounts[] = await myAlgoWallet.connect();\n    return accounts.map(account => account.address);\n  } catch (err) {\n    console.error(err);\n    return [];\n  }\n}","import { encodeUint64, OnApplicationComplete, SuggestedParams } from 'algosdk';\nimport { algodClient, waitForConfirmation } from './Utils';\nimport { CallApplTxn, CreateApplTxn, SignedTx } from '@randlabs/myalgo-connect';\nimport { myAlgoWallet } from './MyAlgoWallet';\n\nasync function getParams(): Promise<SuggestedParams> {\n  let params: SuggestedParams = await algodClient.getTransactionParams().do();\n  params.flatFee = true;\n  params.fee = 1000;\n  return params;\n}\n\nexport async function createApplication(\n  selectedAddr: string,\n  name: string,\n  start: number,\n  expiry: number,\n  goal: number,\n  statefulBytes: Uint8Array,\n  clearBytes: Uint8Array,\n) {\n  const params: SuggestedParams = await getParams();\n\n  const enc = new TextEncoder();\n  const appArgs: Uint8Array[] = [\n    enc.encode(name),\n    encodeUint64(start),\n    encodeUint64(expiry),\n    encodeUint64(goal),\n  ];\n\n  // Create and sign txn\n  const createApp: CreateApplTxn = {\n    ...params,\n    flatFee: true,\n    type: 'appl',\n    from: selectedAddr,\n    appApprovalProgram: statefulBytes,\n    appClearProgram: clearBytes,\n    appLocalInts: 2,\n    appLocalByteSlices: 0,\n    appGlobalInts: 4,\n    appGlobalByteSlices: 2,\n    appArgs: appArgs,\n  }\n  const signedCreateApp: SignedTx = await myAlgoWallet.signTransaction(createApp);\n\n  // Send and wait for confirmation\n  const tx = await algodClient.sendRawTransaction(signedCreateApp.blob).do();\n  console.log(\"Transaction: \" + tx.txId);\n  await waitForConfirmation(tx.txId);\n\n  // Get the new app's id\n  const pendingTx = await algodClient.pendingTransactionInformation(tx.txId).do();\n  const appId = pendingTx[\"application-index\"];\n  console.log(\"AppId: \" + appId);\n\n  return appId;\n}\n\nexport async function setEscrow(\n  selectedAddr: string,\n  appId: number,\n  escrowAddr: string,\n) {\n  const params: SuggestedParams = await getParams();\n\n  const enc = new TextEncoder();\n  const appArgs: Uint8Array[] = [\n    enc.encode('set_escrow'),\n    enc.encode(escrowAddr),\n  ];\n\n  // Create and sign txn\n  const callAppTxn: CallApplTxn = {\n    ...params,\n    flatFee: true,\n    type: \"appl\",\n    from: selectedAddr,\n    appIndex: appId,\n    appOnComplete: OnApplicationComplete.NoOpOC,\n    appArgs: appArgs,\n  }\n  const signedCallApp: SignedTx = await myAlgoWallet.signTransaction(callAppTxn);\n\n  // Send and wait for confirmation\n  const tx = await algodClient.sendRawTransaction(signedCallApp.blob).do();\n  console.log(\"Transaction: \" + tx.txId);\n  await waitForConfirmation(tx.txId);\n}\n\nexport async function match() {\n\n}\n\nexport async function donate() {\n\n}\n\nexport async function recover() {\n\n}\n\nexport async function claim() {\n\n}","import React, { useState } from \"react\";\nimport { BackButton } from '../components/BackButton';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport { AlgoNumberInput } from '../components/NumberInput';\nimport { getApplication, getEscrowAddress } from '../utils/Requests';\nimport { convertDateToUnixTime } from '../utils/Utils';\nimport { createApplication, setEscrow } from '../algorand/Transactions';\n\ninterface CreateFundCampaignProps {\n  selectedAddress?: string;\n  exit: () => void;\n}\n\nexport function CreateFundCampaign(props: CreateFundCampaignProps) {\n\n  const [name, setName] = useState<string>('');\n  const [start, setStart] = useState(null);\n  const [expiry, setExpiry] = useState(null);\n  const [goal, setGoal] = useState(0);\n  const [appId, setAppId] = useState(0);\n\n  const { selectedAddress, exit } = props;\n\n  const clearForm = () => {\n    setName('');\n    setStart(null);\n    setExpiry(null);\n    setGoal(0);\n  }\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n\n    // check values\n    if(name.length === 0 || !start || !expiry || goal === 0 || !selectedAddress) return;\n    const startUnix = convertDateToUnixTime(start!);\n    const expiryUnix = convertDateToUnixTime(expiry!);\n    if (startUnix >= expiryUnix) return;\n\n    // create application\n    const { statefulBytes, clearBytes } = await getApplication();\n    const appId = await createApplication(\n      selectedAddress,\n      name,\n      startUnix,\n      expiryUnix,\n      goal * 1e6,\n      Uint8Array.from(Object.values(statefulBytes)),\n      Uint8Array.from(Object.values(clearBytes)),\n    );\n\n    // set escrow address\n    getEscrowAddress(appId).then(escrowAddr => {\n      setEscrow(selectedAddress, appId, escrowAddr);\n      clearForm();\n      setAppId(appId);\n    })\n  }\n\n  const handleStartChange = (date) => setStart(date);\n  const handleExpiryChange = (date) => setExpiry(date)\n\n  return (\n    <div>\n      <BackButton onClick={exit}/>\n\n      {appId ?\n        <p className={\"content\"}>\n          Created application with ID {appId}. You can found your campaign by\n          searching for this number.\n        </p> : null\n      }\n\n      <form onSubmit={handleSubmit}>\n\n        <Grid container spacing={3}>\n\n          <Grid item xs={7}>\n            <TextField\n                label=\"Name:\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n                required\n                fullWidth\n                inputProps={{ maxLength: 63 }}\n                InputLabelProps={{ required: false }}\n            />\n          </Grid>\n\n          <Grid item xs={5}>\n            <TextField\n                label=\"Fund Goal (Algo):\"\n                value={goal}\n                onChange={e => setGoal(Number(e.target.value))}\n                required\n                InputProps={{ inputComponent: AlgoNumberInput }}\n                InputLabelProps={{ required: false }}\n                fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextField\n              label=\"Selected Address:\"\n              value={selectedAddress ? selectedAddress : ''}\n              helperText=\"This can be changed in the landing page\"\n              required\n              InputLabelProps={{ required: false }}\n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <KeyboardDateTimePicker\n              clearable\n              label=\"Start date:\"\n              value={start}\n              onChange={handleStartChange}\n              disablePast\n              format=\"yyyy/MM/dd HH:mm\"\n              required\n              InputLabelProps={{ required: false }}\n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <KeyboardDateTimePicker\n              clearable\n              label=\"Expiry Date:\"\n              value={expiry}\n              onChange={handleExpiryChange}\n              disablePast\n              format=\"yyyy/MM/dd HH:mm\"\n              required\n              InputLabelProps={{ required: false }}\n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              style={{ margin: '8px 0px' }}\n              fullWidth\n            >\n              Create\n            </Button>\n          </Grid>\n\n        </Grid>\n\n      </form>\n\n    </div>\n  )\n}\n","import React from \"react\";\nimport { BackButton } from '../components/BackButton';\nimport { Search } from '../App';\n\ninterface FundCampaignProps {\n  selectedAddress?: string;\n  search: Search\n  appState?: Map<string, any>;\n  exit: () => void;\n}\n\nexport function FundCampaign(props: FundCampaignProps) {\n\n  const {\n    selectedAddress,\n    search,\n    exit,\n  } = props;\n\n  const searching = (\n    <>Searching...</>\n  )\n\n  const notVerified = (\n    <>The application couldn't be found or verified</>\n  )\n\n  const verified = (\n    <>verified</>\n  )\n\n  return (\n    <div>\n\n      <BackButton onClick={exit}/>\n\n      {search === Search.SEARCHING ? searching : null}\n      {search === Search.NOT_VERIFIED ? notVerified : null}\n      {search === Search.VERIFIED ? verified : null}\n\n    </div>\n  )\n}\n","import React from \"react\";\nimport { connectToMyAlgo } from './MyAlgoWallet';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\ninterface MyAlgoGetAccountsProps {\n  addresses: string[];\n  setAddresses: any;\n  selectedAddress?: string;\n  setSelectedAddress: any;\n}\n\nexport const MyAlgoGetAccounts = (props: MyAlgoGetAccountsProps) => {\n\n  const {\n    addresses,\n    setAddresses,\n    selectedAddress,\n    setSelectedAddress,\n  } = props;\n\n  const connect = async () => {\n    connectToMyAlgo().then(addrs => {\n      setAddresses(addrs);\n      if (addrs.length > 0) setSelectedAddress(addrs[0]);\n    });\n  }\n\n  const handleSelectAddress = async (e) => {\n    const addr = e.target.value;\n    if (addr) setSelectedAddress(addr);\n  }\n\n  return (\n    <div>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={connect}\n        fullWidth\n      >\n        Connect To MyAlgo Wallet\n      </Button>\n\n      <FormControl component=\"fieldset\">\n        <RadioGroup value={selectedAddress ? selectedAddress : ''} onChange={handleSelectAddress}>\n          {addresses.map((addr) => {\n            return (\n              <FormControlLabel\n                key={addr}\n                value={addr}\n                control={<Radio/>}\n                label={addr}\n              />\n            )\n          })}\n        </RadioGroup>\n      </FormControl>\n\n    </div>\n  )\n};","import Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport React from 'react';\n\nexport function HowItWorks() {\n  return (\n    <>\n      <h2>How It Works</h2>\n\n      <p className={\"content\"}>\n        Algo Charity is a platform specifically for match funding campaigns.\n        Match funding is a great way to encourage more people to give and for\n        people to give more as all donations received are multiplied! One has\n        the ability to make an even bigger difference!\n      </p>\n\n      <p className={\"content\"}>\n        Blockchain technology guarantees that your contributions are matched to\n        give you the peace of mind that your money matters.\n      </p>\n\n      <Grid container>\n\n        <Grid item xs={5}>\n          <h3>Matcher</h3>\n          <p className={\"content\"}>\n            Become a matcher and commit to matching donations up to a certain\n            amount with a chosen ratio.\n          </p>\n        </Grid>\n\n        <Grid item xs={2}>\n          <Divider orientation=\"vertical\" style={{ margin: 'auto', width: 3 }} />\n        </Grid>\n\n        <Grid item xs={5}>\n          <h3>Donor</h3>\n          <p className={\"content\"}>\n            Become a donor and have your donation automatically matched.\n          </p>\n        </Grid>\n\n      </Grid>\n    </>\n  )\n}\n","import React, { useState } from \"react\";\nimport { CreateFundCampaign } from './views/CreateFundCampaign';\nimport { FundCampaign } from './views/FundCampaign';\nimport { Landing } from './views/Landing';\n\nexport enum PageNav {\n    LANDING,\n    CREATE,\n    CAMPAIGN,\n}\n\nexport enum Search {\n  SEARCHING,\n  VERIFIED,\n  NOT_VERIFIED,\n}\n\nfunction App() {\n\n  const [nav, setNav] = useState(PageNav.LANDING);\n  const [addresses, setAddresses] = useState([]);\n  const [selectedAddress, setSelectedAddress] = useState(undefined);\n  const [search, setSearch] = useState<Search>(Search.SEARCHING);\n  const [appState, setAppState] = useState<Map<string, any>>();\n\n  const enterCreate = () => setNav(PageNav.CREATE);\n  const enterCampaign = () => setNav(PageNav.CAMPAIGN);\n  const exit = () => setNav(PageNav.LANDING);\n\n  return (\n    <div className={\"page-content\"}>\n\n      <h1>Algo Charity</h1>\n\n      {nav === PageNav.LANDING ?\n        <Landing\n          addresses={addresses}\n          setAddresses={setAddresses}\n          selectedAddress={selectedAddress}\n          setSelectedAddress={setSelectedAddress}\n          setSearch={setSearch}\n          setAppState={setAppState}\n          enterCreate={enterCreate}\n          enterCampaign={enterCampaign}\n        /> : null\n      }\n\n      {nav === PageNav.CREATE ?\n        <CreateFundCampaign\n          selectedAddress={selectedAddress}\n          exit={exit}\n        /> : null\n      }\n\n      {nav === PageNav.CAMPAIGN ?\n        <FundCampaign\n          selectedAddress={selectedAddress}\n          search={search}\n          appState={appState}\n          exit={exit}\n        /> : null\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { MyAlgoGetAccounts } from '../algorand/MyAlgoGetAccounts';\nimport { HowItWorks } from './HowItWorks';\nimport { SearchFundCampaign } from '../components/SearchFundCampaign';\nimport Button from '@material-ui/core/Button';\n\ninterface LandingProps {\n  addresses: string[];\n  setAddresses: any;\n  selectedAddress?: string;\n  setSelectedAddress: any;\n  setSearch: any;\n  setAppState: any;\n  enterCreate: () => void;\n  enterCampaign: () => void;\n}\n\nexport function Landing(props: LandingProps) {\n\n  const {\n    addresses,\n    setAddresses,\n    selectedAddress,\n    setSelectedAddress,\n    setSearch,\n    setAppState,\n    enterCreate,\n    enterCampaign,\n  } = props;\n\n  return (\n    <div>\n      <MyAlgoGetAccounts\n        addresses={addresses}\n        setAddresses={setAddresses}\n        selectedAddress={selectedAddress}\n        setSelectedAddress={setSelectedAddress}\n      />\n\n      <HowItWorks/>\n\n      <h2>Usage</h2>\n\n      <p className={\"content\"}>\n        Connect your MyAlgo wallet (TestNet) and then either search for an existing\n        campaign or create your own!\n      </p>\n\n      <SearchFundCampaign\n        enterCampaign={enterCampaign}\n        setSearch={setSearch}\n        setAppState={setAppState}\n      />\n\n      <br/><br/>\n\n      <Button\n      variant=\"contained\"\n      color=\"primary\"\n      onClick={enterCreate}\n      fullWidth\n      >\n        Create Fund Campaign\n      </Button>\n\n    </div>\n  )\n}\n","const SERVER_URL = 'https://algo-charity.herokuapp.com';\n\nexport async function getApplication(): Promise<{\n  statefulBytes: Uint8Array,\n  clearBytes: Uint8Array,\n}> {\n  const res = await fetch(`${SERVER_URL}/application`);\n  return await res.json();\n}\n\nexport async function getEscrowAddress(appId: number): Promise<string> {\n  const res = await fetch(`${SERVER_URL}/escrow/${appId}`);\n  return await res.json();\n}\n","import NumberFormat from \"react-number-format\";\n\nexport function AlgoNumberInput(props) {\n  return NumberInput({ ...props, hasDecimal: true });\n}\n\nexport enum Prefix {\n  DOLLAR = \"$\",\n  ALGO = \"Algo \",\n}\n\nfunction NumberInput(props) {\n  const { hasDecimal, prefix, inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      decimalScale={hasDecimal ? 6 : undefined}\n      fixedDecimalScale={hasDecimal}\n      thousandSeparator\n      allowNegative={false}\n      prefix={prefix}\n    />\n  );\n}\n\nexport function IntegerInput(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      allowNegative={false}\n    />\n  );\n}\n"],"sourceRoot":""}